package org.jetbrains.grammar;

import org.jetbrains.haskell.parser.HaskellTokenType;


public interface HaskellLexerTokens {
  HaskellTokenType UNDERSCORE = new HaskellTokenType("_");
  HaskellTokenType AS = new HaskellTokenType("as");
  HaskellTokenType CASE = new HaskellTokenType("case");
  HaskellTokenType CLASS = new HaskellTokenType("class");
  HaskellTokenType DATA = new HaskellTokenType("data");
  HaskellTokenType DEFAULT = new HaskellTokenType("default");
  HaskellTokenType DERIVING = new HaskellTokenType("deriving");
  HaskellTokenType DO = new HaskellTokenType("do");
  HaskellTokenType ELSE = new HaskellTokenType("else");
  HaskellTokenType HIDING = new HaskellTokenType("hiding");
  HaskellTokenType IF = new HaskellTokenType("if");
  HaskellTokenType IMPORT = new HaskellTokenType("import");
  HaskellTokenType IN = new HaskellTokenType("in");
  HaskellTokenType INFIX = new HaskellTokenType("infix");
  HaskellTokenType INFIXL = new HaskellTokenType("infixl");
  HaskellTokenType INFIXR = new HaskellTokenType("infixr");
  HaskellTokenType INSTANCE = new HaskellTokenType("instance");
  HaskellTokenType LET = new HaskellTokenType("let");
  HaskellTokenType MODULE = new HaskellTokenType("module");
  HaskellTokenType NEWTYPE = new HaskellTokenType("newtype");
  HaskellTokenType OF = new HaskellTokenType("of");
  HaskellTokenType QUALIFIED = new HaskellTokenType("qualified");
  HaskellTokenType THEN = new HaskellTokenType("then");
  HaskellTokenType TYPE = new HaskellTokenType("type");
  HaskellTokenType WHERE = new HaskellTokenType("where");
  HaskellTokenType FORALL = new HaskellTokenType("forall");
  HaskellTokenType FOREIGN = new HaskellTokenType("foreign");
  HaskellTokenType EXPORT = new HaskellTokenType("export");
  HaskellTokenType LABEL = new HaskellTokenType("label");
  HaskellTokenType DYNAMIC = new HaskellTokenType("dynamic");
  HaskellTokenType SAFE = new HaskellTokenType("safe");
  HaskellTokenType INTERRUPTIBLE = new HaskellTokenType("interruptible");
  HaskellTokenType UNSAFE = new HaskellTokenType("unsafe");
  HaskellTokenType MDO = new HaskellTokenType("mdo");
  HaskellTokenType FAMILY = new HaskellTokenType("family");
  HaskellTokenType ROLE = new HaskellTokenType("role");
  HaskellTokenType STDCALLCONV = new HaskellTokenType("stdcall");
  HaskellTokenType CCALLCONV = new HaskellTokenType("ccall");
  HaskellTokenType CAPICONV = new HaskellTokenType("capi");
  HaskellTokenType PRIMCALLCONV = new HaskellTokenType("prim");
  HaskellTokenType JAVASCRIPTCALLCONV = new HaskellTokenType("javascript");
  HaskellTokenType PROC = new HaskellTokenType("proc");
  HaskellTokenType REC = new HaskellTokenType("rec");
  HaskellTokenType GROUP = new HaskellTokenType("group");
  HaskellTokenType BY = new HaskellTokenType("by");
  HaskellTokenType USING = new HaskellTokenType("using");
  HaskellTokenType PATTERN = new HaskellTokenType("pattern");
  HaskellTokenType INLINE_PRAG = new HaskellTokenType("{-# INLINE");
  HaskellTokenType SPEC_PRAG = new HaskellTokenType("{-# SPECIALISE");
  HaskellTokenType SPEC_INLINE_PRAG = new HaskellTokenType("{-# SPECIALISE_INLINE");
  HaskellTokenType SOURCE_PRAG = new HaskellTokenType("{-# SOURCE");
  HaskellTokenType RULES_PRAG = new HaskellTokenType("{-# RULES");
  HaskellTokenType CORE_PRAG = new HaskellTokenType("{-# CORE");
  HaskellTokenType SCC_PRAG = new HaskellTokenType("{-# SCC");
  HaskellTokenType GENERATED_PRAG = new HaskellTokenType("{-# GENERATED");
  HaskellTokenType DEPRECATED_PRAG = new HaskellTokenType("{-# DEPRECATED");
  HaskellTokenType WARNING_PRAG = new HaskellTokenType("{-# WARNING");
  HaskellTokenType UNPACK_PRAG = new HaskellTokenType("{-# UNPACK");
  HaskellTokenType NOUNPACK_PRAG = new HaskellTokenType("{-# NOUNPACK");
  HaskellTokenType ANN_PRAG = new HaskellTokenType("{-# ANN");
  HaskellTokenType VECT_PRAG = new HaskellTokenType("{-# VECTORISE");
  HaskellTokenType VECT_SCALAR_PRAG = new HaskellTokenType("{-# VECTORISE_SCALAR");
  HaskellTokenType NOVECT_PRAG = new HaskellTokenType("{-# NOVECTORISE");
  HaskellTokenType MINIMAL_PRAG = new HaskellTokenType("{-# MINIMAL");
  HaskellTokenType CTYPE = new HaskellTokenType("{-# CTYPE");
  HaskellTokenType OVERLAPPABLE = new HaskellTokenType("{-# OVERLAPPABLE");
  HaskellTokenType OVERLAPPING = new HaskellTokenType("{-# OVERLAPPING");
  HaskellTokenType OVERLAPS = new HaskellTokenType("{-# OVERLAPS");
  HaskellTokenType INCOHERENT = new HaskellTokenType("{-# INCOHERENT");
  HaskellTokenType CLOSE_PRAG = new HaskellTokenType("#-}");
  HaskellTokenType DOTDOT = new HaskellTokenType("..");
  HaskellTokenType COLON = new HaskellTokenType(":");
  HaskellTokenType DCOLON = new HaskellTokenType("::");
  HaskellTokenType EQUAL = new HaskellTokenType("=");
  HaskellTokenType LAM = new HaskellTokenType("\\");
  HaskellTokenType LCASE = new HaskellTokenType("lcase");
  HaskellTokenType VBAR = new HaskellTokenType("|");
  HaskellTokenType LARROW = new HaskellTokenType("<-");
  HaskellTokenType RARROW = new HaskellTokenType("->");
  HaskellTokenType AT = new HaskellTokenType("@");
  HaskellTokenType TILDE = new HaskellTokenType("~");
  HaskellTokenType TILDEHSH = new HaskellTokenType("~#");
  HaskellTokenType DARROW = new HaskellTokenType("=>");
  HaskellTokenType MINUS = new HaskellTokenType("-");
  HaskellTokenType BANG = new HaskellTokenType("!");
  HaskellTokenType STAR = new HaskellTokenType("*");
  HaskellTokenType LARROWTAIL = new HaskellTokenType("-<");
  HaskellTokenType RARROWTAIL = new HaskellTokenType(">-");
  HaskellTokenType LLARROWTAIL = new HaskellTokenType("-<<");
  HaskellTokenType RRARROWTAIL = new HaskellTokenType(">>-");
  HaskellTokenType DOT = new HaskellTokenType(".");
  HaskellTokenType OCURLY = new HaskellTokenType("{");
  HaskellTokenType CCURLY = new HaskellTokenType("}");
  HaskellTokenType VOCURLY = new HaskellTokenType("vocurly");
  HaskellTokenType VCCURLY = new HaskellTokenType("vccurly");
  HaskellTokenType OBRACK = new HaskellTokenType("[");
  HaskellTokenType CBRACK = new HaskellTokenType("]");
  HaskellTokenType OPABRACK = new HaskellTokenType("[:");
  HaskellTokenType CPABRACK = new HaskellTokenType(":]");
  HaskellTokenType OPAREN = new HaskellTokenType("(");
  HaskellTokenType CPAREN = new HaskellTokenType(")");
  HaskellTokenType OUBXPAREN = new HaskellTokenType("(#");
  HaskellTokenType CUBXPAREN = new HaskellTokenType("#)");
  HaskellTokenType OPARENBAR = new HaskellTokenType("(|");
  HaskellTokenType CPARENBAR = new HaskellTokenType("|)");
  HaskellTokenType SEMI = new HaskellTokenType(";");
  HaskellTokenType COMMA = new HaskellTokenType(",");
  HaskellTokenType BACKQUOTE = new HaskellTokenType("`");
  HaskellTokenType SIMPLEQUOTE = new HaskellTokenType("SIMPLEQUOTE");
  HaskellTokenType VARID = new HaskellTokenType("VARID");
  HaskellTokenType CONID = new HaskellTokenType("CONID");
  HaskellTokenType VARSYM = new HaskellTokenType("VARSYM");
  HaskellTokenType CONSYM = new HaskellTokenType("CONSYM");
  HaskellTokenType QVARID = new HaskellTokenType("QVARID");
  HaskellTokenType QCONID = new HaskellTokenType("QCONID");
  HaskellTokenType QVARSYM = new HaskellTokenType("QVARSYM");
  HaskellTokenType QCONSYM = new HaskellTokenType("QCONSYM");
  HaskellTokenType PREFIXQVARSYM = new HaskellTokenType("PREFIXQVARSYM");
  HaskellTokenType PREFIXQCONSYM = new HaskellTokenType("PREFIXQCONSYM");
  HaskellTokenType DUPIPVARID = new HaskellTokenType("IPDUPVARID");
  HaskellTokenType CHAR = new HaskellTokenType("CHAR");
  HaskellTokenType STRING = new HaskellTokenType("STRING");
  HaskellTokenType INTEGER = new HaskellTokenType("INTEGER");
  HaskellTokenType RATIONAL = new HaskellTokenType("RATIONAL");
  HaskellTokenType PRIMCHAR = new HaskellTokenType("PRIMCHAR");
  HaskellTokenType PRIMSTRING = new HaskellTokenType("PRIMSTRING");
  HaskellTokenType PRIMINT = new HaskellTokenType("PRIMINTEGER");
  HaskellTokenType PRIMWORD = new HaskellTokenType("PRIMWORD");
  HaskellTokenType PRIMFLOAT = new HaskellTokenType("PRIMFLOAT");
  HaskellTokenType PRIMDOUBLE = new HaskellTokenType("PRIMDOUBLE");
  HaskellTokenType DOCCOMMENTNEXT = new HaskellTokenType("DOCNEXT");
  HaskellTokenType DOCCOMMENTPREV = new HaskellTokenType("DOCPREV");
  HaskellTokenType DOCCOMMENTNAMED = new HaskellTokenType("DOCNAMED");
  HaskellTokenType DOCSECTION = new HaskellTokenType("DOCSECTION");
  HaskellTokenType OPENEXPQUOTE = new HaskellTokenType("[|");
  HaskellTokenType OPENPATQUOTE = new HaskellTokenType("[p|");
  HaskellTokenType OPENTYPQUOTE = new HaskellTokenType("[t|");
  HaskellTokenType OPENDECQUOTE = new HaskellTokenType("[d|");
  HaskellTokenType CLOSEQUOTE = new HaskellTokenType("|]");
  HaskellTokenType OPENTEXPQUOTE = new HaskellTokenType("[||");
  HaskellTokenType CLOSETEXPQUOTE = new HaskellTokenType("||]");
  HaskellTokenType IDESCAPE = new HaskellTokenType("TH_ID_SPLICE");
  HaskellTokenType PARENESCAPE = new HaskellTokenType("$(");
  HaskellTokenType IDTYESCAPE = new HaskellTokenType("TH_ID_TY_SPLICE");
  HaskellTokenType PARENTYESCAPE = new HaskellTokenType("$$(");
  HaskellTokenType TYQUOTE = new HaskellTokenType("TH_TY_QUOTE");
  HaskellTokenType QUASIQUOTE = new HaskellTokenType("TH_QUASIQUOTE");
  HaskellTokenType QQUASIQUOTE = new HaskellTokenType("TH_QQUASIQUOTE");
}
