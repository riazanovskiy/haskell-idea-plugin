package org.jetbrains.grammar

import com.intellij.psi.tree.IElementType
import org.jetbrains.haskell.parser.HaskellCompositeElementType
import org.jetbrains.haskell.psi.*


val APPLICATION : IElementType = HaskellCompositeElementType("Application", ::Application)
val APPLICATION_TYPE : IElementType = HaskellCompositeElementType("ApplicationType", ::ApplicationType)
val BIND_STATEMENT : IElementType = HaskellCompositeElementType("BindStatement", ::BindStatement)
val CASE_ALTERNATIVE : IElementType = HaskellCompositeElementType("CaseAlternative", ::CaseAlternative)
val CASE_EXPRESSION : IElementType = HaskellCompositeElementType("CaseExpression", ::CaseExpression)
val CLASS_DECLARATION : IElementType = HaskellCompositeElementType("ClassDeclaration", ::ClassDeclaration)
val CONSTRUCTOR_DECLARATION : IElementType = HaskellCompositeElementType("ConstructorDeclaration", ::ConstructorDeclaration)
val CONTEXT : IElementType = HaskellCompositeElementType("Context", ::Context)
val DATA_DECLARATION : IElementType = HaskellCompositeElementType("DataDeclaration", ::DataDeclaration)
val DO_EXPRESSION : IElementType = HaskellCompositeElementType("DoExpression", ::DoExpression)
val EXPRESSION_STATEMENT : IElementType = HaskellCompositeElementType("ExpressionStatement", ::ExpressionStatement)
val FIELD_DECLARATION : IElementType = HaskellCompositeElementType("FieldDeclaration", ::FieldDeclaration)
val FIELD_UPDATE : IElementType = HaskellCompositeElementType("FieldUpdate", ::FieldUpdate)
val FOREIGN_DECLARATION : IElementType = HaskellCompositeElementType("ForeignDeclaration", ::ForeignDeclaration)
val FUNCTION_TYPE : IElementType = HaskellCompositeElementType("FunctionType", ::FunctionType)
val GUARD : IElementType = HaskellCompositeElementType("Guard", ::Guard)
val IMPORT : IElementType = HaskellCompositeElementType("Import", ::Import)
val IMPORT_AS_PART : IElementType = HaskellCompositeElementType("ImportAsPart", ::ImportAsPart)
val INSTANCE_DECLARATION : IElementType = HaskellCompositeElementType("InstanceDeclaration", ::InstanceDeclaration)
val LAMBDA_EXPRESSION : IElementType = HaskellCompositeElementType("LambdaExpression", ::LambdaExpression)
val LET_EXPRESSION : IElementType = HaskellCompositeElementType("LetExpression", ::LetExpression)
val LET_STATEMENT : IElementType = HaskellCompositeElementType("LetStatement", ::LetStatement)
val LIST_TYPE : IElementType = HaskellCompositeElementType("ListType", ::ListType)
val MODULE : IElementType = HaskellCompositeElementType("Module", ::Module)
val MODULE_EXPORTS : IElementType = HaskellCompositeElementType("ModuleExports", ::ModuleExports)
val MODULE_NAME : IElementType = HaskellCompositeElementType("ModuleName", ::ModuleName)
val OPERATOR_EXPRESSION : IElementType = HaskellCompositeElementType("OperatorExpression", ::OperatorExpression)
val PARENTHESIS_EXPRESSION : IElementType = HaskellCompositeElementType("ParenthesisExpression", ::ParenthesisExpression)
val PATTERN : IElementType = HaskellCompositeElementType("Pattern", ::Pattern)
val Q_CON : IElementType = HaskellCompositeElementType("QCon", ::QCon)
val Q_NAME_EXPRESSION : IElementType = HaskellCompositeElementType("QNameExpression", ::QNameExpression)
val Q_VAR : IElementType = HaskellCompositeElementType("QVar", ::QVar)
val Q_VAR_SYM : IElementType = HaskellCompositeElementType("QVarSym", ::QVarSym)
val RIGHT_HAND_SIDE : IElementType = HaskellCompositeElementType("RightHandSide", ::RightHandSide)
val SIGNATURE_DECLARATION : IElementType = HaskellCompositeElementType("SignatureDeclaration", ::SignatureDeclaration)
val STRING_LITERAL : IElementType = HaskellCompositeElementType("StringLiteral", ::StringLiteral)
val TUPLE_TYPE : IElementType = HaskellCompositeElementType("TupleType", ::TupleType)
val TYPE_SYNONYM : IElementType = HaskellCompositeElementType("TypeSynonym", ::TypeSynonym)
val TYPE_VARIABLE : IElementType = HaskellCompositeElementType("TypeVariable", ::TypeVariable)
val UNGUARDED_R_H_S : IElementType = HaskellCompositeElementType("UnguardedRHS", ::UnguardedRHS)
val VALUE_DEFINITION : IElementType = HaskellCompositeElementType("ValueDefinition", ::ValueDefinition)
val VARIABLE_OPERATION : IElementType = HaskellCompositeElementType("VariableOperation", ::VariableOperation)
val WHERE_BINDINGS : IElementType = HaskellCompositeElementType("WhereBindings", ::WhereBindings)
