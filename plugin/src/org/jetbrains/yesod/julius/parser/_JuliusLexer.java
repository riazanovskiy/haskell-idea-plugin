/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.yesod.julius.parser;

/**
 * @author Leyla H
 */

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>/Users/atsky/work/haskell-idea-plugin/plugin/src/org/jetbrains/yesod/julius/parser/Julius.flex</tt>
 */
class _JuliusLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\43\1\44\1\43\22\0\1\2\1\0\1\45"+
    "\1\35\3\0\1\41\2\0\1\50\2\0\1\3\1\46\1\47\12\1"+
    "\5\0\1\40\1\37\32\3\1\0\1\42\1\0\1\35\1\3\1\0"+
    "\1\5\1\6\1\12\1\26\1\16\1\27\1\13\1\24\1\25\1\3"+
    "\1\22\1\21\1\15\1\17\1\20\1\32\1\3\1\11\1\7\1\10"+
    "\1\14\1\30\1\33\1\31\1\23\1\34\1\36\1\0\1\51\7\0"+
    "\1\43\u1fa2\0\1\43\1\43\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\30\1\1\5\36\0"+
    "\2\6\1\0\1\6\13\0\1\7\2\0\1\10\3\0"+
    "\1\11\1\12\1\13\1\14\33\0\1\6\56\0\1\6"+
    "\10\0\1\6\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\52\0\250\0\322\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\52\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\52\0\u09ae\0\u09d8"+
    "\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\52\0\u0372\0\u03c6\0\52\0\u0bd0"+
    "\0\u03f0\0\u0bfa\0\u041a\0\52\0\52\0\52\0\u0c24\0\u0c4e"+
    "\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e"+
    "\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e"+
    "\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e"+
    "\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de"+
    "\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e"+
    "\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e"+
    "\0\u0e46\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\2\2\1\15\1\16\1\2"+
    "\1\17\1\2\1\20\1\2\1\21\1\22\1\23\1\24"+
    "\1\2\1\25\1\26\1\2\1\27\1\2\1\30\1\2"+
    "\1\31\1\2\1\0\1\4\1\32\1\33\1\34\1\35"+
    "\1\36\53\0\1\3\52\0\1\4\41\0\1\4\13\0"+
    "\1\37\2\0\1\40\51\0\1\41\6\0\1\42\2\0"+
    "\1\43\36\0\1\44\3\0\1\45\6\0\1\46\1\47"+
    "\6\0\1\50\27\0\1\51\11\0\1\52\1\53\43\0"+
    "\1\54\40\0\1\55\12\0\1\56\1\57\2\0\1\60"+
    "\45\0\1\61\50\0\1\62\1\0\1\63\6\0\1\64"+
    "\1\65\25\0\1\66\6\0\1\67\1\0\1\70\51\0"+
    "\1\71\1\0\1\72\56\0\1\73\41\0\1\74\1\0"+
    "\1\75\7\0\1\76\40\0\1\77\1\0\1\100\36\0"+
    "\1\101\6\0\1\102\3\0\1\103\1\104\3\0\1\105"+
    "\31\0\1\103\12\0\1\106\36\0\1\107\3\0\1\110"+
    "\2\0\1\111\61\0\1\112\1\113\62\0\1\114\51\0"+
    "\1\114\1\0\1\115\11\0\41\116\1\117\1\120\7\116"+
    "\42\121\1\122\2\121\1\117\4\121\1\0\1\123\1\0"+
    "\1\123\1\0\30\123\64\0\1\124\1\125\50\0\1\126"+
    "\11\0\1\127\55\0\1\130\54\0\1\131\53\0\1\132"+
    "\41\0\1\133\46\0\1\134\76\0\1\135\36\0\1\136"+
    "\52\0\1\137\56\0\1\140\31\0\1\141\6\0\1\133"+
    "\6\0\1\76\60\0\1\142\30\0\1\143\13\0\1\144"+
    "\34\0\1\145\50\0\1\133\1\146\60\0\1\147\37\0"+
    "\1\150\51\0\1\103\54\0\1\151\55\0\1\152\44\0"+
    "\1\133\47\0\1\153\54\0\1\154\21\0\1\47\27\0"+
    "\1\155\62\0\1\153\63\0\1\76\26\0\1\76\60\0"+
    "\1\156\50\0\1\157\65\0\1\160\26\0\1\161\1\162"+
    "\47\0\1\163\12\0\1\164\5\0\1\165\36\0\1\166"+
    "\56\0\1\63\47\0\1\167\43\0\1\76\60\0\1\170"+
    "\50\0\1\171\53\0\1\172\3\0\1\173\36\0\1\174"+
    "\57\0\1\175\4\0\1\176\32\0\1\177\70\0\1\200"+
    "\34\0\1\201\41\0\4\116\1\0\36\116\2\0\5\116"+
    "\4\121\1\0\36\121\2\0\5\121\10\0\1\202\55\0"+
    "\1\203\42\0\1\204\65\0\1\205\46\0\1\76\43\0"+
    "\1\206\57\0\1\103\45\0\1\207\50\0\1\71\50\0"+
    "\1\146\60\0\1\210\50\0\1\211\53\0\1\212\40\0"+
    "\1\76\56\0\1\213\47\0\1\201\46\0\1\71\1\214"+
    "\50\0\1\144\62\0\1\76\46\0\1\76\55\0\1\76"+
    "\46\0\1\215\60\0\1\216\37\0\1\76\57\0\1\173"+
    "\50\0\1\137\1\217\40\0\1\220\57\0\1\221\47\0"+
    "\1\222\53\0\1\43\40\0\1\223\52\0\1\200\55\0"+
    "\1\224\44\0\1\71\51\0\1\225\51\0\1\226\72\0"+
    "\1\76\45\0\1\227\37\0\1\230\71\0\1\231\42\0"+
    "\1\206\51\0\1\133\54\0\1\76\36\0\1\232\55\0"+
    "\1\233\56\0\1\76\45\0\1\234\60\0\1\235\50\0"+
    "\1\236\34\0\1\237\62\0\1\240\64\0\1\241\27\0"+
    "\1\242\65\0\1\243\43\0\1\244\62\0\1\133\37\0"+
    "\1\203\40\0\1\245\55\0\1\246\53\0\1\247\52\0"+
    "\1\250\45\0\1\251\62\0\1\252\40\0\1\112\46\0"+
    "\1\253\62\0\1\254\40\0\1\43\51\0\1\255\62\0"+
    "\1\256\40\0\1\242\56\0\1\76\50\0\1\257\65\0"+
    "\1\260\53\0\1\76\41\0\1\76\51\0\1\261\60\0"+
    "\1\144\42\0\1\262\61\0\1\263\35\0\1\135\57\0"+
    "\1\71\55\0\1\264\45\0\1\265\43\0\1\133\50\0"+
    "\1\266\51\0\1\71\56\0\1\267\52\0\1\270\47\0"+
    "\1\271\47\0\1\133\47\0\1\142\44\0\1\272\64\0"+
    "\1\242\54\0\1\76\36\0\1\273\51\0\1\144\60\0"+
    "\1\274\51\0\1\71\44\0\1\133\55\0\1\173\60\0"+
    "\1\275\60\0\1\273\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\30\1\1\11\36\0\1\1"+
    "\1\11\1\0\1\1\13\0\1\11\2\0\1\11\3\0"+
    "\1\1\3\11\33\0\1\1\56\0\1\1\10\0\1\1"+
    "\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JuliusLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JuliusLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 13: break;
        case 2: 
          { return JuliusTokenTypes.NUMBER;
          }
        case 14: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 15: break;
        case 4: 
          { return JuliusTokenTypes.NEWLINE;
          }
        case 16: break;
        case 5: 
          { return JuliusTokenTypes.END_INTERPOLATION;
          }
        case 17: break;
        case 6: 
          { return JuliusTokenTypes.KEYWORD;
          }
        case 18: break;
        case 7: 
          { return JuliusTokenTypes.INTERPOLATION;
          }
        case 19: break;
        case 8: 
          { return JuliusTokenTypes.STRING;
          }
        case 20: break;
        case 9: 
          { return JuliusTokenTypes.DOT_IDENTIFIER;
          }
        case 21: break;
        case 10: 
          { return JuliusTokenTypes.COMMENT;
          }
        case 22: break;
        case 11: 
          { return JuliusTokenTypes.COMMENT_START;
          }
        case 23: break;
        case 12: 
          { return JuliusTokenTypes.COMMENT_END;
          }
        case 24: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
